"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int!

  """Streamed when true."""
  if: Boolean
) on FIELD

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]

  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER
) on SCHEMA | OBJECT | FIELD_DEFINITION

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Patient implements Node {
  id: ID!
  events: [PatientEvent!]!
  idNumber: String!
  name: String!
  surname: String!
  scheduledProcedures: [ScheduledProcedure!]
  tracker: PatientTracker!
  patientLocationId: Int
  hospitalId: Int!
  hospital: Hospital!
  currentLocation: Location
  bedId: Int
  bed: Bed
  createdAt: DateTime!
  updatedAt: DateTime
}

interface PatientEvent {
  """Gets or sets Timestamp of the event."""
  eventTime: DateTime!

  """Gets or sets Optional Patient Location at time of event."""
  location: Location
  locationId: Int
  createdAt: DateTime!
  updatedAt: DateTime
}

type PatientEventScheduledProcedureStepArrived implements PatientEvent {
  scheduledProcedureStep: ScheduledProcedureStep!

  """Gets or sets Timestamp of the event."""
  eventTime: DateTime!

  """Gets or sets Optional Patient Location at time of event."""
  location: Location
  locationId: Int
  createdAt: DateTime!
  updatedAt: DateTime
}

type PatientEventScheduledProcedureStepDeparted implements PatientEvent {
  scheduledProcedureStep: ScheduledProcedureStep!

  """Gets or sets Timestamp of the event."""
  eventTime: DateTime!

  """Gets or sets Optional Patient Location at time of event."""
  location: Location
  locationId: Int
  createdAt: DateTime!
  updatedAt: DateTime
}

type ScheduledProcedure implements Node {
  id: ID!
  procedure: Procedure!
  patientId: Int!
  patient: Patient!
  practitioners: [Practitioner!]!
  hospital: Hospital!
  startTime: DateTime!
  steps: [ScheduledProcedureStep!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type ScheduledProcedureStep implements Node {
  id: ID!
  procedureStep: ProcedureStep!
  scheduledProcedure: ScheduledProcedure!
  location: Location!
  expectedStartTime: DateTime!
  expectedDuration: TimeSpan!
}

type Bed implements Node {
  id: ID!
  code: String!
  locationId: Int!
  location: Location!
}

type Tracker implements Node {
  id: ID!
  hardwareId: String!
  name: String!
  hospital: Hospital!
}

type Practitioner implements Node {
  id: ID!
  type: PractitionerType!
  scheduledProcedures: [ScheduledProcedure!]!
  specialization: String
  firstName: String!
  lastName: String!
  userType: UserType!
  partyId: Int!
  party: Party!
  createdAt: DateTime!
  updatedAt: DateTime
  createdByPartyId: Int
  createdByParty: Party
  updatedByPartyId: Int
  updatedByParty: Party
  hospitals: [Hospital!]!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type Hospital implements Node {
  id: ID!
  name: String!
  streetNumber: String!
  streetName: String!
  suburb: String!
  province: String!
  city: String!
  postalCode: String!
  patients(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PatientsConnection
  locations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): LocationsConnection
  procedures(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ProceduresConnection
  users(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): UsersConnection
  trackers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): TrackersConnection
  createdAt: DateTime!
  updatedAt: DateTime
}

type Company implements Node {
  id: ID!
  name: String!
  description: String
  hospitals: [Hospital!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Location implements Node {
  id: ID!
  name: String!
  description: String!
  locationType: LocationType!
  receivers: [Receiver!]
  scheduledProcedureSteps: [ScheduledProcedureStep!]!
  hospital: Hospital!
  beds: [Bed!]
}

type Procedure implements Node {
  id: ID!
  name: String!
  description: String!
  hospital: Hospital!
  steps: [ProcedureStep!]!
  scheduledProcedures: [ScheduledProcedure!]!
}

type ProcedureStep implements Node {
  id: ID!
  order: Int!
  description: String!
  locationId: ID!
  location: Location!
  procedureId: Int!
  procedure: Procedure!
  expectedDuration: TimeSpan!
}

type Receiver implements Node {
  id: ID!
  hardwareId: String!
  locationId: Int
  location: Location
}

"""The `TimeSpan` scalar represents an ISO-8601 compliant duration type."""
scalar TimeSpan

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"""A connection to a list of items."""
type PatientsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientsEdge!]

  """A flattened list of the nodes."""
  nodes: [Patient!]
}

"""A connection to a list of items."""
type LocationsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationsEdge!]

  """A flattened list of the nodes."""
  nodes: [Location!]
}

"""A connection to a list of items."""
type ProceduresConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProceduresEdge!]

  """A flattened list of the nodes."""
  nodes: [Procedure!]
}

"""A connection to a list of items."""
type UsersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersEdge!]

  """A flattened list of the nodes."""
  nodes: [User!]
}

"""A connection to a list of items."""
type TrackersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrackersEdge!]

  """A flattened list of the nodes."""
  nodes: [Tracker!]
}

"""Information about pagination in a connection."""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PatientsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Patient!
}

"""An edge in a connection."""
type LocationsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Location!
}

"""An edge in a connection."""
type ProceduresEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Procedure!
}

type User {
  firstName: String!
  lastName: String!
  userType: UserType!
  partyId: Int!
  party: Party!
  createdAt: DateTime!
  updatedAt: DateTime
  createdByPartyId: Int
  createdByParty: Party
  updatedByPartyId: Int
  updatedByParty: Party
  hospitals: [Hospital!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

"""An edge in a connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}

"""An edge in a connection."""
type TrackersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Tracker!
}

type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  me: User!
  myHospital: Hospital!
  patients(
    search: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PatientsConnection
  trackers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): TrackersConnection
  scheduledProcedures(
    practitioners: [String!]
    locations: [String!]
    bed: [String!]
    patient: String
    date: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ScheduledProceduresConnection
  beds(
    code: String
    locations: [String!]

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): BedsConnection
  locations(
    location: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): LocationsConnection
  receivers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ReceiversConnection
  practitioners(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): PractitionersConnection
  hospitals(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): HospitalsConnection
  procedures(
    search: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): ProceduresConnection
}

type Mutation {
  createProcedure(input: CreateProcedureInput!): CreateProcedurePayload!
  deleteProcedure(input: DeleteProcedureInput!): DeleteProcedurePayload!
  updateProcedure(input: UpdateProcedureInput!): UpdateProcedurePayload!
  createPatient(input: CreatePatientInput!): CreatePatientPayload!
  createLocation(input: CreateLocationInput!): CreateLocationPayload!
  patientScheduledProcedureStepArrive(input: CreateLocationInput!): CreateLocationPayload!
  patientScheduledProcedureStepDepart(input: CreateLocationInput!): CreateLocationPayload!
  createBed(input: CreateBedInput!): CreateBedPayload!
  deleteBed(input: DeleteBedInput!): DeleteBedPayload!
  updateBed(input: UpdateBedInput!): UpdateBedPayload!
}

type PatientTracker {
  id: Int!
  trackerId: Int!
  tracker: Tracker!
  patientId: Int!
  patient: Patient!
  createdAt: DateTime!
  updatedAt: DateTime
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

enum PractitionerType {
  DOCTOR
  NURSE
  TECHNICIAN
  OTHER
}

enum UserType {
  PRACTITIONER
  PLATFORM_TECHNICIAN
  SUPER_ADMIN
}

type Party {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

enum LocationType {
  RECEPTION
  WARD
  THEATRE
  WAITING_ROOM
  OTHER
}

"""A connection to a list of items."""
type ScheduledProceduresConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledProceduresEdge!]

  """A flattened list of the nodes."""
  nodes: [ScheduledProcedure!]
}

"""A connection to a list of items."""
type BedsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BedsEdge!]

  """A flattened list of the nodes."""
  nodes: [Bed!]
}

"""A connection to a list of items."""
type ReceiversConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReceiversEdge!]

  """A flattened list of the nodes."""
  nodes: [Receiver!]
}

"""A connection to a list of items."""
type PractitionersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PractitionersEdge!]

  """A flattened list of the nodes."""
  nodes: [Practitioner!]
}

"""A connection to a list of items."""
type HospitalsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HospitalsEdge!]

  """A flattened list of the nodes."""
  nodes: [Hospital!]
}

"""An edge in a connection."""
type ScheduledProceduresEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScheduledProcedure!
}

"""An edge in a connection."""
type BedsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Bed!
}

"""An edge in a connection."""
type ReceiversEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Receiver!
}

"""An edge in a connection."""
type PractitionersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Practitioner!
}

"""An edge in a connection."""
type HospitalsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Hospital!
}

type CreateLocationPayload {
  locations: [Location!]!
}

input CreatePatientInput {
  idNumber: String!
  name: String!
  surname: String!
  procedureInput: CreatePatientScheduleProcedureInput
  trackerId: ID
}

type CreatePatientPayload {
  patient: Patient!
}

input UpdateProcedureInput {
  id: ID!
  name: String!
  description: String!
  procedureStepInputs: [UpdateProcedureStepInput!]!
}

type UpdateProcedurePayload {
  procedure: Procedure!
}

input DeleteProcedureInput {
  id: ID!
}

type DeleteProcedurePayload {
  procedure: Procedure!
}

input CreateProcedureInput {
  name: String!
  description: String!
  procedureStepInputs: [CreateProcedureStepInput!]!
}

type CreateProcedurePayload {
  procedure: Procedure!
}

input CreateLocationInput {
  locationInputs: [LocationInput!]!
}

type CreateBedPayload {
  bed: [Bed!]!
}

input CreateBedInput {
  locationId: ID!
  bedInputs: [BedInput!]!
}

type DeleteBedPayload {
  bed: Bed!
}

input DeleteBedInput {
  id: ID!
}

type UpdateBedPayload {
  bed: [Bed!]!
}

input UpdateBedInput {
  locationId: ID!
  bedInputs: [BedInput!]!
}

input BedInput {
  id: ID
  code: String!
}

input LocationInput {
  name: String!
  description: String!
  locationType: LocationType!
  receiversInputs: [ReceiversInput!]
}

input CreateProcedureStepInput {
  locationId: ID!
  order: Int!
  description: String!
  expectedDuration: String!
}

input UpdateProcedureStepInput {
  id: ID
  locationId: ID!
  order: Int!
  description: String!
  expectedDuration: String!
}

input CreatePatientScheduleProcedureInput {
  procedureId: ID!
  bedId: ID
  practitionerIds: [ID!]!
  scheduledDate: DateTime!
}

input ReceiversInput {
  id: ID!
}
